#!/bin/zsh 
# if you copy this file into a testplan.zsh file, you can execute the file directly
cd Ass2
make all

# Open first terminal
cd Ass2
make all
make run_server

# Open second terminal
cd Ass2
mkdir test
cd test

# ------------------------
# Manual Testing sequence
# ------------------------


# Test Case -1: 'checkout' project without running configure. Expect failure.
../client/WTF checkout non_existent_project

# Test Case 1: Configure. Expect success.
../client/WTF configure 127.0.0.1 8000

# Test Case 2: 'Create' project. Expect success.\n");
../client/WTF create proj1

# Test Case 3: 'Create' project when it already exists. Expect failure.
../client/WTF create proj1

# Test Case 4: 'Add' three files to the project. Expect success.
echo 'example file 1' > proj1/ex1.txt
echo 'example file 2' > proj1/ex2.txt
echo 'example file 3' > proj1/ex3.txt
../client/WTF add proj1 ex1.txt
../client/WTF add proj1 ex2.txt
../client/WTF add proj1 ex3.txt

# Test Case 5: Attempt to 'Add' a file that is already in the project. Expect failure.
../client/WTF add proj1 ex1.txt

# Test Case 6: Attempt to 'Push' without a .commit file. Expect faiure.\n");
 ../client/WTF push proj1

# Test Case 7: 'Commit' the project. Expect success.
../client/WTF commit proj1

# Test Case 8: 'Push' the project after commit. Expect success.
../client/WTF push proj1

# Test Case 9: Attempting to 'commit' the project without any differences. Expect success.\n");
../client/WTF commit proj1

# Test Case 10: Modify a file ex1.txt, then 'commit' & 'push'. Expect success.\n");
echo 'Exmaple 1 modified' >> proj1/ex1.txt
../client/WTF commit proj1
../client/WTF push   proj1

# Test Case 11: Attempting to 'Upgrade' the Project without a .update file. Expect failure.
../client/WTF upgrade proj1

# Test Case 12: Attempting to 'Update' the Project without any removed Project files. Expect 'Up to date'.\n");
../client/WTF update proj1

# Test Case 13: 'Remove' a Project file. Expect success.
../client/WTF remove proj1 ex1.txt

# Test Case 14: Attempting to 'Remove' a file that is not being tracked. Expect failure.
../client/WTF remove proj1 ex1.txt

# Test Case 15: Removing Project files, then Update the Project. Expect success.
 ../client/WTF update proj1 ex1.txt

# Test Case 16: 'Upgrade' the Project. Expect success.
../client/WTF upgrade proj1

#Test Case 17: Modifing a Project file and attempting to Update
open("client/ex1.txt", O_RDWR | O_APPEND, S_IRUSR | S_IWUSR | S_IXUSR)
write(contents, "stuff", 5)
close(contents)
../client/WTF update proj1

# Test Case 18: First delete project locally, then 'checkout' a project. Expect success
rm -rf proj1
../client/WTF checkout proj1

# Test Case 19: Get currentversion of a project. Expect success.
../client/WTF currentversion proj1

# Test Case 20: Get currentversion of a project that does not exist. Expect failure.
../client/WTF currentversion non_existent_project

# Test Case 21: Get 'history' of a project. Expect success.
../client/WTF history proj1

# Test Case 22: Get 'history' of a project that does not exist. Expect failure.
../client/WTF history non_existent_project

# Test Case 23: 'checkout' a project when it already exists locally. Expect failure.
../client/WTF checkout proj1

# Test Case 24: 'rollback' an existing project. Expect success.
../client/WTF rollback proj1 1

# Test Case 25: 'rollback' a project that does not exist. Expect failure.
../client/WTF rollback non_existent_project 1

# Test Case 26: 'Destroy' the Project. Expect success.
../client/WTF destroy proj1

# Test case 27: Attempting to 'Destroy' the Project when it doesn't exist. Expect failure.
../client/WTF destroy proj1

# Test Case 28: 'checkout' a project after we have destryed the project. Expect failure.
../client/WTF checkout proj1
